VARIABLES EN PYTHON
Variables en Python siguen la nomenclatura estandar de un nombre que comienza alfanumerico en una letra o un guión.
Los nombres de variables distinguen entre mayusculas y minusculas. 
Las variables no necesitan ser declaradas y sus tipos de datos se infieren de la instrucción de asignacion.

Variables Ambiente:  La mayoria de las variables en Python son locales en el ambito de su propia funcion o clase. Por ejemplo, si se define a = 1 dentro de una funcion,
y luego a estará disponible dentro de esa función entera pero no estara definido en el programa principal que llama a la funcion. 
Las variables definidas en el programa principal son accesibles para el programa principal, pero no dentro de las funciones llamadas por el programa principal. 

Variables Globales:  variables globales, sin embargo, se pueden declarar con la palabra clave  global  
a = 1
b = 2
def Sum():
   global a, b
   b = a + b
Sum()
print(b)
-> 3

-------------------------------------------------------------------------------------------------------------------------------------------------------
 VARIABLES EN C++
 
 Los nombres utilizados para las variables tienen que ser autoexplicativos. De manera que en el propio nombre esté la indicación del uso o finalidad de las variables.

Para componer los nombres de las variables se utilizarán principalmente sustantivos, pudiendo calificarse con adjetivos.
Esta norma se establece para mejorar la identificación de los distintos componentes de un sistema.

Una práctica muy habitual es utilizar una serie de prefijos para poder identificar el tipo de variable de una forma sencilla y rápida
por ejemplo:
void, prefijo : v ----- vVariableVacia;
int, prefijo : n ------ nNumero
enum (enumeraciones), prefijo:	e	-----EBoole eResultado;
------------------------------------------------------------------------------------------------------------------------------------------------------------

VARIABLES EN JAVASCRIPT
Utiliza variables como nombres simbólicos para valores en tu aplicación. Los nombres de las variables, llamados identificadores, se ajustan a ciertas reglas.

Un identificador de JavaScript debe comenzar con una letra, un guión bajo (_) o un signo de dólar ($). Los siguientes caracteres también pueden ser dígitos (0-9).

Dado que JavaScript distingue entre mayúsculas y minúsculas, las letras incluyen los caracteres "A" a "Z" (mayúsculas), así como "a" a "z" (minúsculas).

Se puede utilizar la mayoría de las letras ISO 8859-1 o Unicode como å y ü en los identificadores.

también se puede usar Secuencias de escape Unicode como caracteres en identificadores.

Algunos ejemplos de nombres legales son Number_hits, temp99, $credit y _name.

se puede declarar una variable de dos formas:

Con la palabra clave var. Por ejemplo, var x = 42. Esta sintaxis se puede utilizar para declarar variables locales y globales, dependiendo del contexto de ejecución.
Con la palabra clave const o let. Por ejemplo, let y = 13. Esta sintaxis se puede utilizar para declarar una variable local con ámbito de bloque
También se puede simplemente asignar un valor a una variable. Por ejemplo, x = 42. Este formulario crea una variable global no declarada. 
También genera una advertencia estricta de JavaScript. Las variables globales no declaradas a menudo pueden provocar un comportamiento inesperado. 
Por lo tanto, se desaconseja utilizar variables globales no



-------------------------------------------------------------------------------------------------------------------------------------------------------------

PARAMATROS "t" y "b" de la función open() en python

"b"  se usa para manejar archivos en modo binario, generalmente se usa para manejar archivos de imagen, porque no todos los archivos pueden ser procesados por líneas,
existen archivos en los que cada byte tiene un significado particular y es necesario manipularlos conociendo el formato en que están los datos para poder procesar esa información   

"t" se usa para manejar archivos en modo texto, la función open por defecto usa el modo texto, 
por ejemplo el "rt" hace que el archivo se abra para lectura en modo texto en valor predeterminados, no es necesario especificarlos

-------------------------------------------------------------------------------------------------------------------------------------------------------------

FUNCIONES EN PYTHON

Para definir una función en Python se utiliza la palabra reservada def. Luego hay que colocar el nombre o identificador de la función que es el que se utiliza para invocarla.
Después del nombre hay que incluir los paréntesis y una lista opcional de parámetros. Por último, la cabecera o definición de la función termina con dos puntos.

Tras los dos puntos se incluye el cuerpo de la función (con un sangrado mayor, generalmente cuatro espacios) que no es más que el conjunto de instrucciones que se encapsulan en dicha función y que le dan significado.

En último lugar y de manera opcional, se añade la instrucción con la palabra reservada return para devolver un resultado.





FUNCIONES EN C++

Los elementos necesarios de una declaración de función son los siguientes:

Tipo de valor devuelto, que especifica el tipo del valor que devuelve la función o void si no se devuelve ningún valor.

El nombre de función, que debe comenzar con una letra o un carácter de subrayado y no puede contener espacios.
En general, un carácter de subrayado inicial en los nombres de función de la biblioteca estándar indica funciones de miembro privado o funciones no miembro que no están pensadas para que las use el código.

La lista de parámetros, que es un conjunto delimitado por llaves y separado por comas de cero o más parámetros que especifican el tipo y,
opcionalmente, un nombre local mediante el cual se puede acceder a los valores de dentro del cuerpo de la función.

Los elementos opcionales de una declaración de función son los siguientes:

constexpr, que indica que el valor devuelto de la función es un valor constante que se puede calcular en tiempo de compilación.

Su especificación de vinculación, extern o static.

inline, que indica al compilador que reemplace todas las llamadas a la función con el propio código de la función.
La inserción en línea puede mejorar el rendimiento en escenarios donde una función se ejecuta rápidamente y se invoca varias veces en una sección del código crítica para el rendimiento.

Expresión noexcept , que especifica si la función puede producir o no una excepción

(Solo funciones miembro) Los calificadores cv, que especifican si la función es const o volatile.

(Solo funciones miembro) virtual, overrideo final. virtual especifica que una función se puede reemplazar en una clase derivada. override significa que una función de una clase derivada reemplaza una función virtual. final significa que una función no se puede reemplazar en ninguna otra clase derivada. Para más información, consulte Funciones virtuales.

(solo funciones miembro) static aplicado a una función miembro significa que la función no está asociada a ninguna instancia de objeto de la clase .

(Solo funciones miembro no estáticas) Calificador ref, que especifica al compilador qué sobrecarga de una función elegir cuando el parámetro de objeto implícito (*this) es una referencia rvalue frente a una referencia lvalue


FUNCIONES EN JAVASCRIPT

Una definición de función (también denominada declaración de función o expresión de función) consta de la palabra clave function, seguida de:

El nombre de la función.
Una lista de parámetros de la función, entre paréntesis y separados por comas.
Las declaraciones de JavaScript que definen la función, encerradas entre llaves, { ... }.

Los parámetros primitivos (como un number) se pasan a las funciones por valor; el valor se pasa a la función, pero si la función cambia el valor del parámetro, este cambio no se refleja globalmente ni en la función que llama.

Si pasas un objeto (es decir, un valor no primitivo, como Array o un objeto definido por el usuario) como parámetro y la función cambia las propiedades del objeto
Si bien la declaración de función anterior sintácticamente es una declaración, las funciones también se pueden crear mediante una expresión function.

Esta función puede ser anónima; no tiene por qué tener un nombre
Sin embargo, se puede proporcionar un nombre con una expresión function. Proporcionar un nombre permite que la función se refiera a sí misma y también facilita la identificación de la función en el seguimiento de la pila de un depurador:

Las expresiones function son convenientes cuando se pasa una función como argumento a otra función
En JavaScript, una función se puede definir en función de una condición
